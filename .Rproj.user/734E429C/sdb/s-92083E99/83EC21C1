{
    "collab_server" : "",
    "contents" : "# HOUSE MODEL DEVELOPMENT\n# CORY McCARTAN\n\nlibrary(loo)\nlibrary(shinystan)\nlibrary(rstan)\nlibrary(magrittr)\nlibrary(dplyr)\n\nrstan_options(auto_write = TRUE)\noptions(mc.cores = parallel::detectCores())\n\n####################\n#   VOTER INTENT   #\n####################\npolls = read.csv(\"model/data/current_polls.csv\", colClasses=c(date=\"Date\"))\nmodel.data = list(W = 1 + max(polls$week),\n                  P = max(polls$firm.id),\n                  N = nrow(polls),\n                  w = 1 + max(polls$week) - polls$week,\n                  p = polls$firm.id,\n                  n_resp = polls$n_resp,\n                  n_side = polls$n_side,\n                  n_dem = polls$n_dem)\npoll.w = max(model.data$w)\n\n# run intent model\nintent.model = stan(file=\"stan/intent-model.stan\", model_name=\"intent\",\n                    data=model.data, iter=5000, warmup=1000, chains=1,\n                    control=list(adapt_delta=0.99, max_treedepth=15))\n# extract samples and estimates\nprint(intent.model, pars=c(\"sd_poll\", \"sd_walk\", \"sd_pollster\", \"nu\", \"rho\", \"mu_pollster\"))\nsamples = rstan::extract(intent.model, pars=c(\"dem_margin\", \"logit_dem\"))\n\n# get mean and sd of expected voter intent\nlogit.est = mean(samples$logit_dem[,model.data$W])\nlogit.sd = sd(samples$logit_dem[,model.data$W])\n\n# plot dem. support estimates\nmrg = as.data.frame(t(apply(samples$dem_margin, 2, quantile, \n                            probs=c(0.05, 0.5, 0.95))))\nnames(mrg) = c(\"low\", \"median\", \"high\")\nmrg$week = 1:nrow(mrg)\n\nggplot(mrg, aes(x=week)) + geom_line(aes(y=median)) + \n    geom_ribbon(aes(ymin=low, ymax=high), alpha=0.5) + \n    coord_cartesian(ylim=c(-0.05, 0.20)) + \n    geom_hline(yintercept=0, linetype=\"dashed\") +\n    geom_vline(xintercept=poll.w)\n\n\n####################\n#  RESULTS MODEL   #\n####################\nform = ~ midterm*pres + pres:appr + pres:earn + pres:unemp + midterm*I(before-218)\n\n# set up data list input\nmodel.data = read.csv(\"data/combined.csv\") %>% filter(weeks_until == 0)\ndata.list = as.list(model.data)\ndata.list$X = model.matrix(form, data=model.data)\ndata.list$K = ncol(data.list$X)\ndata.list$year = with(data.list, (year - min(year))/2 + 1)\ndata.list$N = length(data.list$year)\ndata.list$Y = max(data.list$year)\n# use estimated s.d. intent from this year, but increased slightly\ndata.list$sd_intent = rep(1.5*sd(samples$logit_dem[,poll.w]), data.list$N)\n\n# run results model\nresults.model = stan(file=\"stan/results-model.stan\", model_name=\"results\",\n                     data=data.list, iter=11000, warmup=1000, chains=1,\n                     control=list(adapt_delta=0.999, max_treedepth=10))\n# output estimates\nprint(results.model, pars=c(\"beta_intent\", \"betas\", \"error\"))\nplot(results.model, pars=c(\"beta_intent\", \"betas\", \"error\"))\n# extract and save samples\nest = rstan::extract(results.model)\nsaveRDS(est, \"results-model-samples.rds\")\nsamples_pred = est$seats_pred\nseats_pred = apply(samples_pred, 2, median)\nresid = model.data$seats - seats_pred\n\n# plot actual vs predicted seats for each year\nggplot(model.data) + \n    geom_point(aes(x=factor(year), y=seats_pred)) + \n    geom_point(aes(x=factor(year), y=seats), color='red')\n\nggplot(model.data) + \n    geom_point(aes(x=factor(year), y=resid))\n\n# calculate in-sample predicted probabilities of control\nres = model.data %>% \n    transmute(year=year, \n              control=ifelse(seats >= 218, 1, 0),\n              seats=seats,\n              deficit=seats - 218,\n              pr_control=0)\n\nfor (i in 1:nrow(res)) {\n    res$pr_control[i] = mean(samples_pred[,i] >= 218)\n}\n\nbrier = mean((res$pr_control - res$control)^2)\nbrier_1 = mean((1/3 - res$control)^2) # always guess 0.333\nbrier_skill = 1 - brier / brier_1\n\n# test 2018 predicitons\nelection.d = data.frame(logit_intent=logit.est, sd_intent=logit.sd, \n                        midterm=1, pres=-1, house=-1, appr=log(0.37/(1-0.37)), \n                        unemp=0.043, earn=0.0240, before=194)\n\npost_pred = function(est, new.d) {\n    X = model.matrix(form, data=new.d)\n    N = length(est$error)\n    logit_true = rnorm(N, new.d$logit_intent, new.d$sd_intent)\n    mu = est$beta_intent*logit_true + c(est$betas %*% t(X))\n    rnorm(N, mu, est$error) + new.d$before\n}\n                        \n# histogram of expected seats \npr = post_pred(est, election.d)\nprint(mean(pr >= 218))\nggplot() + \n    geom_histogram(aes(pr, fill=(pr >= 218)), binwidth=3, center=0.5) + \n    scale_fill_manual(values=c(\"FALSE\"=\"red\", \"TRUE\"=\"blue\"), \n                      labels=c(\"FALSE\"=\"GOP\", \"TRUE\"=\"DEM\")) +\n    geom_vline(xintercept=election.d$before, linetype=\"dashed\") + \n    geom_vline(xintercept=203) + \n    geom_vline(xintercept=193) + \n    xlim(0, 435) + labs(x=\"Seats\", y=\"\", fill=\"Control\")\n\n\n# calculate how probability of control changes w.r.t. some input variable\nprobs = data.frame(weeks=1:57, low=0, med=0, high=0, prob=0)\nfor (i in 1:nrow(probs)) {\n    logit.est = mean(samples$logit_dem[,i])\n    logit.sd = sd(samples$logit_dem[,i])\n    election.d = data.frame(logit_intent=logit.est, sd_intent=logit.sd, \n                            midterm=1, pres=-1, house=-1, appr=log(0.37/(1-0.37)), \n                            unemp=0.043, earn=0.0240, before=194)\n    pr = post_pred(est, election.d)\n    \n    q = quantile(pr, c(0.1, 0.5, 0.9))\n    probs$low[i] = q[1]\n    probs$med[i] = q[2]\n    probs$high[i] = q[3]\n    probs$prob[i] = mean(pr >= 218)\n}\n\nggplot(probs, aes(x=weeks)) + geom_line(aes(y=med)) + \n    geom_ribbon(aes(ymin=low, ymax=high), alpha=0.5) +\n    geom_hline(yintercept=218, linetype=\"dashed\")\n\nggplot(probs, aes(x=weeks, y=prob)) + geom_line()",
    "created" : 1541522793642.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1758559545",
    "id" : "83EC21C1",
    "lastKnownWriteTime" : 1515382864,
    "last_content_update" : 1541522822075,
    "path" : "~/Documents/Analyses/house/model/build-model.R",
    "project_path" : "model/build-model.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}